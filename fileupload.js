// Generated by CoffeeScript 1.8.0
(function() {
  var DragDropSelector, FileSelector, IFileSelector, _base,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if ((_base = HTMLCanvasElement.prototype).toBlob == null) {
    _base.toBlob = function(cb, type, encOption) {
      var base64, binary, bytes, i, _i, _ref;
      base64 = this.toDataURL(type, encOption).split(',')[1];
      binary = atob(base64);
      bytes = new Uint8Array(binary.length);
      for (i = _i = 0, _ref = binary.length; _i < _ref; i = _i += 1) {
        bytes[i] = binary.charCodeAt(i);
      }
      return cb(new Blob([bytes.buffer], {
        type: type
      }));
    };
  }

  IFileSelector = (function() {
    function IFileSelector() {}

    IFileSelector.prototype.get = function() {};

    return IFileSelector;

  })();

  FileSelector = (function(_super) {
    __extends(FileSelector, _super);

    function FileSelector(el) {
      this.el = el;
      this.el.addEventListener('change', (function(_this) {
        return function() {
          if (_this.el.files.length) {
            return typeof _this._resolve === "function" ? _this._resolve(_this.el.files[0]) : void 0;
          } else {
            return typeof _this._reject === "function" ? _this._reject() : void 0;
          }
        };
      })(this));
    }

    FileSelector.prototype.get = function() {
      return new Promise((function(_this) {
        return function(_resolve, _reject) {
          _this._resolve = _resolve;
          _this._reject = _reject;
          return _this.el.click();
        };
      })(this));
    };

    return FileSelector;

  })(IFileSelector);

  DragDropSelector = (function(_super) {
    __extends(DragDropSelector, _super);

    function DragDropSelector(el) {
      this.el = el;
      this.el.addEventListener('dragover', function(e) {
        e.stopPropagation();
        e.preventDefault();
        return e.dataTransfer.dropEffect = 'copy';
      });
      this.el.addEventListener('drop', (function(_this) {
        return function(e) {
          var files;
          e.stopPropagation();
          e.preventDefault();
          files = e.dataTransfer.files;
          if (files.length) {
            return typeof _this._resolve === "function" ? _this._resolve(files[0]) : void 0;
          }
        };
      })(this));
    }

    DragDropSelector.prototype.get = function() {
      return new Promise((function(_this) {
        return function(_resolve, _reject) {
          _this._resolve = _resolve;
          _this._reject = _reject;
        };
      })(this));
    };

    return DragDropSelector;

  })(IFileSelector);

  window.FileUpload = {
    FileSelector: FileSelector,
    DragDropSelector: DragDropSelector
  };

}).call(this);

//# sourceMappingURL=fileupload.js.map
